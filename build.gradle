plugins {
    id 'nebula.netflixoss' version '9.1.0'
    id 'com.github.sherter.google-java-format' version '0.8'
}

repositories {
    mavenCentral()
}

googleJavaFormat {
    options style: 'AOSP'
}

ext.githubProjectName = 'Priam'

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'project-report'

    group = 'com.netflix.priam'

    repositories {
        mavenCentral()
    }

    configurations {
        all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
        all*.exclude group: 'ch.qos.logback', module: 'logback-core'
    }

    dependencies {
        compile 'org.apache.commons:commons-lang3:3.8.1'
        compile 'org.apache.commons:commons-text:1.8'
        compile 'commons-logging:commons-logging:1.2'
        compile 'org.apache.commons:commons-collections4:4.2'
        compile 'commons-io:commons-io:2.6'
        compile 'commons-cli:commons-cli:1.4'
        compile 'com.sun.jersey.contribs:jersey-multipart:1.19.4'
        compile 'com.sun.jersey:jersey-json:1.19.4'
        compile 'com.sun.jersey:jersey-bundle:1.19.4'
        compile 'com.sun.jersey.contribs:jersey-guice:1.19.4'
        // Cassandra 2.1 requires guava 19.0 max
        compile 'com.google.guava:guava:19.0'
        compile 'com.google.code.findbugs:jsr305:3.0.2'

        // AWS Services
        compile 'com.amazonaws:aws-java-sdk-core:latest.release'
        compile 'com.amazonaws:aws-java-sdk-s3:latest.release'
        compile 'com.amazonaws:aws-java-sdk-sns:latest.release'
        compile 'com.amazonaws:aws-java-sdk-ec2:latest.release'
        compile 'com.amazonaws:aws-java-sdk-autoscaling:latest.release'
        compile 'com.amazonaws:aws-java-sdk-sts:latest.release'
        compile 'com.amazonaws:aws-java-sdk-simpledb:latest.release'
        
        compile 'com.google.inject:guice:4.2.2'
        compile 'com.google.inject.extensions:guice-servlet:4.2.2'
        compile 'org.quartz-scheduler:quartz:2.3.0'
        compile 'com.googlecode.json-simple:json-simple:1.1.1'
        compile 'org.xerial.snappy:snappy-java:1.1.7.2'
        compile 'org.yaml:snakeyaml:1.23'
        compile 'org.apache.cassandra:cassandra-all:2.1.17'
        compile 'javax.ws.rs:jsr311-api:1.1.1'
        compile 'joda-time:joda-time:2.10.1'
        compile 'org.apache.commons:commons-configuration2:2.4'
        compile 'xerces:xercesImpl:2.12.0'
        compile 'net.java.dev.jna:jna:5.2.0'
        compile 'org.apache.httpcomponents:httpclient:4.5.6'
        compile 'org.apache.httpcomponents:httpcore:4.4.11'
        compile 'com.ning:compress-lzf:1.0.4'
        compile 'com.google.code.gson:gson:2.8.5'
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'org.slf4j:slf4j-log4j12:1.7.25'
        compile 'org.bouncycastle:bcprov-jdk16:1.46'
        compile 'org.bouncycastle:bcpg-jdk16:1.46'
        compile('com.google.appengine.tools:appengine-gcs-client:0.8') {
            exclude module: 'guava'
        }
        compile 'com.google.apis:google-api-services-storage:v1-rev141-1.25.0'
        compile 'com.google.http-client:google-http-client-jackson2:1.28.0'
        compile 'com.netflix.spectator:spectator-api:0.83.0'
        compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
        testCompile 'org.jmockit:jmockit:1.38'
        testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
        testCompile "com.google.truth:truth:1.0.1"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    dependsOn subprojects*.test

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories.setFrom(files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it
                    )
                }
        ))
    }
}
