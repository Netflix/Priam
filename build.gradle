plugins {
    id 'nebula.netflixoss' version '5.1.1'
    id 'com.github.sherter.google-java-format' version '0.7.1'
}

repositories {
    jcenter()
}

googleJavaFormat {
    options style: 'AOSP'
}

ext.githubProjectName = 'Priam'

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'project-report'
    
    group = 'com.netflix.priam'

    repositories {
        jcenter()
    }
    
    configurations {
      all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
      all*.exclude group: 'ch.qos.logback', module: 'logback-core'
    }

    dependencies {
      compile 'org.apache.commons:commons-lang3:3.5'
      compile 'commons-logging:commons-logging:1.2'
      compile 'org.apache.commons:commons-collections4:4.1'
      compile 'commons-io:commons-io:2.6'
      compile 'commons-cli:commons-cli:1.4'
      compile 'commons-httpclient:commons-httpclient:3.1'
      compile 'com.sun.jersey.contribs:jersey-multipart:1.19.4'
      compile 'com.sun.jersey:jersey-json:1.19.4'
      compile 'com.sun.jersey:jersey-bundle:1.19.4'
      compile 'com.sun.jersey.contribs:jersey-guice:1.19.4'
      compile 'com.google.guava:guava:21.0'
      compile 'com.google.code.findbugs:jsr305:3.0.2'
      compile 'com.amazonaws:aws-java-sdk:1.11.386'
      compile 'com.google.inject:guice:4.1.0'
      compile 'com.google.inject.extensions:guice-servlet:4.1.0'
      compile 'org.quartz-scheduler:quartz:2.3.0'
      compile 'com.googlecode.json-simple:json-simple:1.1.1'
      compile 'org.xerial.snappy:snappy-java:1.1.2.6'
      compile 'org.yaml:snakeyaml:1.19'
      compile 'org.apache.cassandra:cassandra-all:2.1.17'
      compile 'javax.ws.rs:jsr311-api:1.1.1'
      compile 'joda-time:joda-time:2.9.9'
      compile 'org.apache.commons:commons-configuration2:2.1.1'
      compile 'xerces:xercesImpl:2.11.0'
      compile 'net.java.dev.jna:jna:4.4.0'
      compile 'org.apache.httpcomponents:httpclient:4.5.3'
      compile 'org.apache.httpcomponents:httpcore:4.4.6'
      compile 'com.ning:compress-lzf:1.0.4'
      compile 'com.google.code.gson:gson:2.8.2'
      compile 'org.slf4j:slf4j-api:1.7.25'
      compile 'org.slf4j:slf4j-log4j12:1.7.25'
      compile 'org.bouncycastle:bcprov-jdk16:1.46'
      compile 'org.bouncycastle:bcpg-jdk16:1.46'
      compile ('com.google.appengine.tools:appengine-gcs-client:0.7') {
          exclude module: 'guava'
      }
      compile 'com.google.apis:google-api-services-storage:v1-rev100-1.22.0'
      compile 'com.google.http-client:google-http-client-jackson2:1.22.0'
      compile 'com.netflix.spectator:spectator-api:0.74.2'
      compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
      testCompile 'org.jmockit:jmockit:1.31'
      testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
      testCompile 'junit:junit:4.12'
      //testCompile 'mockit:mockit:0.999'

      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }
}

task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    dependsOn subprojects*.test

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories = files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it
                    )
                }
        )
    }
}
